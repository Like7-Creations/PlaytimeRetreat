//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/MechanicsControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MechanicsControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MechanicsControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MechanicsControl"",
    ""maps"": [
        {
            ""name"": ""Pickup&Drop/Throw"",
            ""id"": ""5a512146-4f9b-4683-9d4c-addbe41e86a1"",
            ""actions"": [
                {
                    ""name"": ""PickUp"",
                    ""type"": ""Button"",
                    ""id"": ""e83ac8a0-e50f-48e0-818d-dce97256171a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Charge"",
                    ""type"": ""Button"",
                    ""id"": ""5842b043-9761-47ef-b428-0570d00f43fe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Throw"",
                    ""type"": ""Button"",
                    ""id"": ""91bd655b-2630-4084-8f7d-0adec49f3251"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d88fb6df-8d57-42a8-8922-5509c4bb8053"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a404322-6873-4c40-8073-838a0b943509"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Charge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7bf02dcf-eb8d-4345-a912-b25bb47dba6f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Pickup&Drop/Throw
        m_PickupDropThrow = asset.FindActionMap("Pickup&Drop/Throw", throwIfNotFound: true);
        m_PickupDropThrow_PickUp = m_PickupDropThrow.FindAction("PickUp", throwIfNotFound: true);
        m_PickupDropThrow_Charge = m_PickupDropThrow.FindAction("Charge", throwIfNotFound: true);
        m_PickupDropThrow_Throw = m_PickupDropThrow.FindAction("Throw", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Pickup&Drop/Throw
    private readonly InputActionMap m_PickupDropThrow;
    private IPickupDropThrowActions m_PickupDropThrowActionsCallbackInterface;
    private readonly InputAction m_PickupDropThrow_PickUp;
    private readonly InputAction m_PickupDropThrow_Charge;
    private readonly InputAction m_PickupDropThrow_Throw;
    public struct PickupDropThrowActions
    {
        private @MechanicsControl m_Wrapper;
        public PickupDropThrowActions(@MechanicsControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @PickUp => m_Wrapper.m_PickupDropThrow_PickUp;
        public InputAction @Charge => m_Wrapper.m_PickupDropThrow_Charge;
        public InputAction @Throw => m_Wrapper.m_PickupDropThrow_Throw;
        public InputActionMap Get() { return m_Wrapper.m_PickupDropThrow; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PickupDropThrowActions set) { return set.Get(); }
        public void SetCallbacks(IPickupDropThrowActions instance)
        {
            if (m_Wrapper.m_PickupDropThrowActionsCallbackInterface != null)
            {
                @PickUp.started -= m_Wrapper.m_PickupDropThrowActionsCallbackInterface.OnPickUp;
                @PickUp.performed -= m_Wrapper.m_PickupDropThrowActionsCallbackInterface.OnPickUp;
                @PickUp.canceled -= m_Wrapper.m_PickupDropThrowActionsCallbackInterface.OnPickUp;
                @Charge.started -= m_Wrapper.m_PickupDropThrowActionsCallbackInterface.OnCharge;
                @Charge.performed -= m_Wrapper.m_PickupDropThrowActionsCallbackInterface.OnCharge;
                @Charge.canceled -= m_Wrapper.m_PickupDropThrowActionsCallbackInterface.OnCharge;
                @Throw.started -= m_Wrapper.m_PickupDropThrowActionsCallbackInterface.OnThrow;
                @Throw.performed -= m_Wrapper.m_PickupDropThrowActionsCallbackInterface.OnThrow;
                @Throw.canceled -= m_Wrapper.m_PickupDropThrowActionsCallbackInterface.OnThrow;
            }
            m_Wrapper.m_PickupDropThrowActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PickUp.started += instance.OnPickUp;
                @PickUp.performed += instance.OnPickUp;
                @PickUp.canceled += instance.OnPickUp;
                @Charge.started += instance.OnCharge;
                @Charge.performed += instance.OnCharge;
                @Charge.canceled += instance.OnCharge;
                @Throw.started += instance.OnThrow;
                @Throw.performed += instance.OnThrow;
                @Throw.canceled += instance.OnThrow;
            }
        }
    }
    public PickupDropThrowActions @PickupDropThrow => new PickupDropThrowActions(this);
    public interface IPickupDropThrowActions
    {
        void OnPickUp(InputAction.CallbackContext context);
        void OnCharge(InputAction.CallbackContext context);
        void OnThrow(InputAction.CallbackContext context);
    }
}
